# This file is auto-generated by the Perl DateTime Suite time zone
# code generator (0.01) This code generator comes with the
# DateTime::TimeZone module distribution in the tools/ directory
#
# Generated from Port_au_Prince.
#
# Do not edit this file directly.
#
package DateTime::TimeZone::America::Port_au_Prince;

use strict;

use Class::Singleton;
use DateTime::TimeZone;
use DateTime::TimeZone::OlsonDB;

@DateTime::TimeZone::America::Port_au_Prince::ISA = ( 'Class::Singleton', 'DateTime::TimeZone' );

my $spans =
[
  {
    'short_name' => 'LMT',
    'utc_end' => '59611178960',
    'utc_start' => DateTime::TimeZone::NEG_INFINITY,
    'local_end' => '59611161600',
    'is_dst' => 0,
    'offset' => -17360,
    'local_start' => '-inf'
  },
  {
    'short_name' => 'PPMT',
    'utc_end' => '60465199740',
    'utc_start' => '59611178960',
    'local_end' => '60465182400',
    'is_dst' => 0,
    'offset' => -17340,
    'local_start' => '59611161620'
  },
  {
    'short_name' => 'ET',
    'utc_end' => '62572021200',
    'utc_start' => '60465199740',
    'local_end' => '62572003200',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '60465181740'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62587746000',
    'utc_start' => '62572021200',
    'local_end' => '62587728000',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62572003200'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62603467200',
    'utc_start' => '62587746000',
    'local_end' => '62603452800',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62587731600'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62619195600',
    'utc_start' => '62603467200',
    'local_end' => '62619177600',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62603449200'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62634916800',
    'utc_start' => '62619195600',
    'local_end' => '62634902400',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62619181200'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62650645200',
    'utc_start' => '62634916800',
    'local_end' => '62650627200',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62634898800'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62666366400',
    'utc_start' => '62650645200',
    'local_end' => '62666352000',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62650630800'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62711733600',
    'utc_start' => '62666366400',
    'local_end' => '62711715600',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62666348400'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62729874000',
    'utc_start' => '62711733600',
    'local_end' => '62729859600',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62711719200'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62743183200',
    'utc_start' => '62729874000',
    'local_end' => '62743165200',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62729856000'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62761323600',
    'utc_start' => '62743183200',
    'local_end' => '62761309200',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62743168800'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62774632800',
    'utc_start' => '62761323600',
    'local_end' => '62774614800',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62761305600'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62792773200',
    'utc_start' => '62774632800',
    'local_end' => '62792758800',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62774618400'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62806687200',
    'utc_start' => '62792773200',
    'local_end' => '62806669200',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62792755200'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62824222800',
    'utc_start' => '62806687200',
    'local_end' => '62824208400',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62806672800'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62838136800',
    'utc_start' => '62824222800',
    'local_end' => '62838118800',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62824204800'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62855672400',
    'utc_start' => '62838136800',
    'local_end' => '62855658000',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62838122400'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62869586400',
    'utc_start' => '62855672400',
    'local_end' => '62869568400',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62855654400'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62887726800',
    'utc_start' => '62869586400',
    'local_end' => '62887712400',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62869572000'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62901036000',
    'utc_start' => '62887726800',
    'local_end' => '62901018000',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62887708800'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62919176400',
    'utc_start' => '62901036000',
    'local_end' => '62919162000',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62901021600'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62932485600',
    'utc_start' => '62919176400',
    'local_end' => '62932467600',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62919158400'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62950626000',
    'utc_start' => '62932485600',
    'local_end' => '62950611600',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62932471200'
  },
  {
    'short_name' => 'EST',
    'utc_end' => '62964540000',
    'utc_start' => '62950626000',
    'local_end' => '62964522000',
    'is_dst' => 0,
    'offset' => -18000,
    'local_start' => '62950608000'
  },
  {
    'short_name' => 'EDT',
    'utc_end' => '62982075600',
    'utc_start' => '62964540000',
    'local_end' => '62982061200',
    'is_dst' => 1,
    'offset' => -14400,
    'local_start' => '62964525600'
  },
  {
    'short_name' => 'ET',
    'utc_end' => DateTime::TimeZone::INFINITY,
    'utc_start' => '62982075600',
    'offset' => -18000
  }
]
;

my $max_year = 2013;

sub _new_instance
{
    return shift->_init( @_, spans => $spans );
}



1;

