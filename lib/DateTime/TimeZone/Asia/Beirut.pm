# This file is auto-generated by the Perl DateTime Suite time zone
# code generator (0.04) This code generator comes with the
# DateTime::TimeZone module distribution in the tools/ directory
#
# Generated from ../../data/tz/Olson/asia.
#
# Do not edit this file directly.
#
package DateTime::TimeZone::Asia::Beirut;

use strict;

use Class::Singleton;
use DateTime::TimeZone;
use DateTime::TimeZone::OlsonDB;

@DateTime::TimeZone::Asia::Beirut::ISA = ( 'Class::Singleton', 'DateTime::TimeZone' );

my $spans =
[
  {
    'short_name' => 'LMT',
    'utc_end' => '59295533880',
    'utc_start' => DateTime::TimeZone::NEG_INFINITY,
    'local_end' => '59295542400',
    'is_dst' => 0,
    'offset' => 8520,
    'local_start' => DateTime::TimeZone::NEG_INFINITY
  },
  {
    'short_name' => 'EET',
    'utc_end' => '61735816800',
    'utc_start' => '59295533880',
    'local_end' => '61735824000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '59295541080'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '61749032400',
    'utc_start' => '61735816800',
    'local_end' => '61749043200',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '61735827600'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '61767352800',
    'utc_start' => '61749032400',
    'local_end' => '61767360000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '61749039600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '61780568400',
    'utc_start' => '61767352800',
    'local_end' => '61780579200',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '61767363600'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '61798888800',
    'utc_start' => '61780568400',
    'local_end' => '61798896000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '61780575600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '61812104400',
    'utc_start' => '61798888800',
    'local_end' => '61812115200',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '61798899600'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '61830511200',
    'utc_start' => '61812104400',
    'local_end' => '61830518400',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '61812111600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '61843726800',
    'utc_start' => '61830511200',
    'local_end' => '61843737600',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '61830522000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62222421600',
    'utc_start' => '61843726800',
    'local_end' => '62222428800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '61843734000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62240738400',
    'utc_start' => '62222421600',
    'local_end' => '62240745600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62222428800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62253954000',
    'utc_start' => '62240738400',
    'local_end' => '62253964800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62240749200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62272274400',
    'utc_start' => '62253954000',
    'local_end' => '62272281600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62253961200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62285490000',
    'utc_start' => '62272274400',
    'local_end' => '62285500800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62272285200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62303810400',
    'utc_start' => '62285490000',
    'local_end' => '62303817600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62285497200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62317026000',
    'utc_start' => '62303810400',
    'local_end' => '62317036800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62303821200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62335432800',
    'utc_start' => '62317026000',
    'local_end' => '62335440000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62317033200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62348648400',
    'utc_start' => '62335432800',
    'local_end' => '62348659200',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62335443600'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62587893600',
    'utc_start' => '62348648400',
    'local_end' => '62587900800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62348655600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62602405200',
    'utc_start' => '62587893600',
    'local_end' => '62602416000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62587904400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62619429600',
    'utc_start' => '62602405200',
    'local_end' => '62619436800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62602412400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62633941200',
    'utc_start' => '62619429600',
    'local_end' => '62633952000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62619440400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62650965600',
    'utc_start' => '62633941200',
    'local_end' => '62650972800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62633948400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62665477200',
    'utc_start' => '62650965600',
    'local_end' => '62665488000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62650976400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62697016800',
    'utc_start' => '62665477200',
    'local_end' => '62697024000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62665484400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62728639200',
    'utc_start' => '62697016800',
    'local_end' => '62728646400',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62697024000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62760175200',
    'utc_start' => '62728639200',
    'local_end' => '62760182400',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62728646400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62777196000',
    'utc_start' => '62760175200',
    'local_end' => '62777203200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62760182400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62791707600',
    'utc_start' => '62777196000',
    'local_end' => '62791718400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62777206800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62808732000',
    'utc_start' => '62791707600',
    'local_end' => '62808739200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62791714800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62868949200',
    'utc_start' => '62808732000',
    'local_end' => '62868960000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62808742800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62884674000',
    'utc_start' => '62868949200',
    'local_end' => '62884684800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62868960000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62900402400',
    'utc_start' => '62884674000',
    'local_end' => '62900409600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62884681200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62916123600',
    'utc_start' => '62900402400',
    'local_end' => '62916134400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62900413200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62931852000',
    'utc_start' => '62916123600',
    'local_end' => '62931859200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62916130800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62947573200',
    'utc_start' => '62931852000',
    'local_end' => '62947584000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62931862800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62963906400',
    'utc_start' => '62947573200',
    'local_end' => '62963913600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62947580400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62979627600',
    'utc_start' => '62963906400',
    'local_end' => '62979638400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62963917200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62995356000',
    'utc_start' => '62979627600',
    'local_end' => '62995363200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62979634800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63011077200',
    'utc_start' => '62995356000',
    'local_end' => '63011088000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62995366800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63026805600',
    'utc_start' => '63011077200',
    'local_end' => '63026812800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63011084400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63058251600',
    'utc_start' => '63026805600',
    'local_end' => '63058262400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63026816400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63077000400',
    'utc_start' => '63058251600',
    'local_end' => '63077011200',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63058262400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63089704800',
    'utc_start' => '63077000400',
    'local_end' => '63089712000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63077007600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63108450000',
    'utc_start' => '63089704800',
    'local_end' => '63108460800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63089715600'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63121154400',
    'utc_start' => '63108450000',
    'local_end' => '63121161600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63108457200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63139899600',
    'utc_start' => '63121154400',
    'local_end' => '63139910400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63121165200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63153208800',
    'utc_start' => '63139899600',
    'local_end' => '63153216000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63139906800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63171349200',
    'utc_start' => '63153208800',
    'local_end' => '63171360000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63153219600'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63184658400',
    'utc_start' => '63171349200',
    'local_end' => '63184665600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63171356400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63202798800',
    'utc_start' => '63184658400',
    'local_end' => '63202809600',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63184669200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63216108000',
    'utc_start' => '63202798800',
    'local_end' => '63216115200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63202806000'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63234853200',
    'utc_start' => '63216108000',
    'local_end' => '63234864000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63216118800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63247557600',
    'utc_start' => '63234853200',
    'local_end' => '63247564800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63234860400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63266302800',
    'utc_start' => '63247557600',
    'local_end' => '63266313600',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63247568400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63279007200',
    'utc_start' => '63266302800',
    'local_end' => '63279014400',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63266310000'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63297752400',
    'utc_start' => '63279007200',
    'local_end' => '63297763200',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63279018000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63310456800',
    'utc_start' => '63297752400',
    'local_end' => '63310464000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63297759600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63329202000',
    'utc_start' => '63310456800',
    'local_end' => '63329212800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63310467600'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63342511200',
    'utc_start' => '63329202000',
    'local_end' => '63342518400',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63329209200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63360651600',
    'utc_start' => '63342511200',
    'local_end' => '63360662400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63342522000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63373960800',
    'utc_start' => '63360651600',
    'local_end' => '63373968000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63360658800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63392101200',
    'utc_start' => '63373960800',
    'local_end' => '63392112000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63373971600'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63405410400',
    'utc_start' => '63392101200',
    'local_end' => '63405417600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63392108400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63424155600',
    'utc_start' => '63405410400',
    'local_end' => '63424166400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63405421200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63436860000',
    'utc_start' => '63424155600',
    'local_end' => '63436867200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63424162800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63455605200',
    'utc_start' => '63436860000',
    'local_end' => '63455616000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63436870800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63468309600',
    'utc_start' => '63455605200',
    'local_end' => '63468316800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63455612400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63487054800',
    'utc_start' => '63468309600',
    'local_end' => '63487065600',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63468320400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63500364000',
    'utc_start' => '63487054800',
    'local_end' => '63500371200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63487062000'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63518504400',
    'utc_start' => '63500364000',
    'local_end' => '63518515200',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63500374800'
  }
]
;

my $max_year = 2013;

sub _new_instance
{
    return shift->_init( @_, spans => $spans );
}

my $rules = [
  bless( {
    'letter' => 'S',
    'on' => 'lastSun',
    'save' => '1:00',
    'to' => 'max',
    'from' => '1993',
    'in' => 'Mar',
    'at' => '0:00',
    'type' => undef,
    'offset' => 3600
  }, 'DateTime::TimeZone::OlsonDB::Rule' ),
  bless( {
    'letter' => '',
    'on' => 'lastSun',
    'save' => '0',
    'to' => 'max',
    'from' => '1999',
    'in' => 'Oct',
    'at' => '0:00',
    'type' => undef,
    'offset' => 0
  }, 'DateTime::TimeZone::OlsonDB::Rule' )
]
;
my $last_observance = bless( {
  'until' => undef,
  'format' => 'EE%sT',
  'gmtoff' => '2:00',
  'rules' => 'Lebanon',
  'offset' => 7200,
  'start' => bless( {
    'local_rd_secs' => 0,
    'local_rd_days' => 686291,
    'language' => bless( {
      'month_numbers' => {},
      'am_pm' => [
        'AM',
        'PM'
      ],
      'ordinal_suffixes' => [],
      'month_abbreviations' => [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
      ],
      'day_abbreviations' => [
        'Mon',
        'Tue',
        'Wed',
        'Thu',
        'Fri',
        'Sat',
        'Sun'
      ],
      'month_names' => [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
      ],
      'day_numbers' => {},
      'day_names' => [
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
        'Sunday'
      ]
    }, 'DateTime::Language::English' ),
    'rd_nanosecs' => 0,
    'tz' => bless( {}, 'DateTime::TimeZone::UTC' ),
    'local_c' => {
      'hour' => 0,
      'second' => 0,
      'month' => 1,
      'quarter' => 1,
      'day_of_year' => 1,
      'day_of_quarter' => 1,
      'minute' => 0,
      'day' => 1,
      'day_of_week' => 4,
      'year' => 1880
    },
    'utc_rd_secs' => 0,
    'utc_rd_days' => 686291
  }, 'DateTime' )
}, 'DateTime::TimeZone::OlsonDB::Observance' )
;

sub _generate_spans_until_match
{
    my $self = shift;
    my $dt = shift;

    my $generate_until_year = $dt->utc_year + 1;

    my @changes;
    foreach my $rule (@$rules)
    {
        foreach my $year ( $max_year .. $generate_until_year )
        {
            my $next = $rule->date_for_year( $year, 7200 );

            # don't bother with changes we've seen already
            next if $next->{utc}->utc_rd_as_seconds < $self->max_span->{utc_end};

            push @changes,
                DateTime::TimeZone::OlsonDB::Change->new
                    ( start_date => $next->{local},
                      short_name =>
                      sprintf( $last_observance->format, $rule->letter ),
                      observance => $last_observance,
                      rule       => $rule,
                    );
        }
    }

    $max_year = $generate_until_year;
    my @sorted = sort { $a->start_date <=> $b->start_date } @changes;

    my $seconds = $dt->utc_rd_as_seconds;
    my $match;

    for ( my $x = 1; $x < @sorted; $x++ )
    {
        my $last_offset =
            $x == 1 ? $self->max_span->{offset} : $changes[ $x - 2 ]->offset;

        my $span =
            DateTime::TimeZone::OlsonDB::Change::two_changes_as_span
                ( @sorted[ $x - 1, $x ], $last_offset );

        push @{ $self->{spans} }, $span;

        $match = $span
            if $seconds >= $span->{utc_start} && $seconds < $span->{utc_end};
    }

    return $match;
}


1;

