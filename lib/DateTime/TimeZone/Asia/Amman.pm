# This file is auto-generated by the Perl DateTime Suite time zone
# code generator (0.01) This code generator comes with the
# DateTime::TimeZone module distribution in the tools/ directory
#
# Generated from Amman.
#
# Do not edit this file directly.
#
package DateTime::TimeZone::Asia::Amman;

use strict;

use Class::Singleton;
use DateTime::TimeZone;
use DateTime::TimeZone::OlsonDB;

@DateTime::TimeZone::Asia::Amman::ISA = ( 'Class::Singleton', 'DateTime::TimeZone' );

my $spans =
[
  {
    'short_name' => 'LMT',
    'utc_end' => '60904906576',
    'utc_start' => $DateTime::TimeZone::NEG_INFINITY,
    'local_end' => '60904915200',
    'is_dst' => 0,
    'offset' => 8624,
    'local_start' => '-inf'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62253957600',
    'utc_start' => '60904906576',
    'local_end' => '62253964800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '60904913776'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62272274400',
    'utc_start' => '62253957600',
    'local_end' => '62272281600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62253964800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62285490000',
    'utc_start' => '62272274400',
    'local_end' => '62285500800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62272285200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62303810400',
    'utc_start' => '62285490000',
    'local_end' => '62303817600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62285497200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62335429200',
    'utc_start' => '62303810400',
    'local_end' => '62335440000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62303821200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62648629200',
    'utc_start' => '62335429200',
    'local_end' => '62648640000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62335440000'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62664354000',
    'utc_start' => '62648629200',
    'local_end' => '62664364800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62648640000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62680082400',
    'utc_start' => '62664354000',
    'local_end' => '62680089600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62664361200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62695803600',
    'utc_start' => '62680082400',
    'local_end' => '62695814400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62680093200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62727861600',
    'utc_start' => '62695803600',
    'local_end' => '62727868800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62695810800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62759311200',
    'utc_start' => '62727861600',
    'local_end' => '62759318400',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62727868800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62853660000',
    'utc_start' => '62759311200',
    'local_end' => '62853667200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62759318400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62869384800',
    'utc_start' => '62853660000',
    'local_end' => '62869392000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62853667200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62900830800',
    'utc_start' => '62869384800',
    'local_end' => '62900841600',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62869395600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62932885200',
    'utc_start' => '62900830800',
    'local_end' => '62932896000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62900841600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62946795600',
    'utc_start' => '62932885200',
    'local_end' => '62946806400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62932896000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62964338400',
    'utc_start' => '62946795600',
    'local_end' => '62964345600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62946802800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '62978850000',
    'utc_start' => '62964338400',
    'local_end' => '62978860800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62964349200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '62995788000',
    'utc_start' => '62978850000',
    'local_end' => '62995795200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '62978857200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63010299600',
    'utc_start' => '62995788000',
    'local_end' => '63010310400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '62995798800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63074325600',
    'utc_start' => '63010299600',
    'local_end' => '63074332800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63010306800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63090050400',
    'utc_start' => '63074325600',
    'local_end' => '63090057600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63074332800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63105771600',
    'utc_start' => '63090050400',
    'local_end' => '63105782400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63090061200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63121500000',
    'utc_start' => '63105771600',
    'local_end' => '63121507200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63105778800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63137221200',
    'utc_start' => '63121500000',
    'local_end' => '63137232000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63121510800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63152949600',
    'utc_start' => '63137221200',
    'local_end' => '63152956800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63137228400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63168670800',
    'utc_start' => '63152949600',
    'local_end' => '63168681600',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63152960400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63184399200',
    'utc_start' => '63168670800',
    'local_end' => '63184406400',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63168678000'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63200120400',
    'utc_start' => '63184399200',
    'local_end' => '63200131200',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63184410000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63215848800',
    'utc_start' => '63200120400',
    'local_end' => '63215856000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63200127600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63232174800',
    'utc_start' => '63215848800',
    'local_end' => '63232185600',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63215859600'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63247903200',
    'utc_start' => '63232174800',
    'local_end' => '63247910400',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63232182000'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63263624400',
    'utc_start' => '63247903200',
    'local_end' => '63263635200',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63247914000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63279352800',
    'utc_start' => '63263624400',
    'local_end' => '63279360000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63263631600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63295074000',
    'utc_start' => '63279352800',
    'local_end' => '63295084800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63279363600'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63310802400',
    'utc_start' => '63295074000',
    'local_end' => '63310809600',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63295081200'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63326523600',
    'utc_start' => '63310802400',
    'local_end' => '63326534400',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63310813200'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63342252000',
    'utc_start' => '63326523600',
    'local_end' => '63342259200',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63326530800'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63357973200',
    'utc_start' => '63342252000',
    'local_end' => '63357984000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63342262800'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63373701600',
    'utc_start' => '63357973200',
    'local_end' => '63373708800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63357980400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63389422800',
    'utc_start' => '63373701600',
    'local_end' => '63389433600',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63373712400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63405151200',
    'utc_start' => '63389422800',
    'local_end' => '63405158400',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63389430000'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63421477200',
    'utc_start' => '63405151200',
    'local_end' => '63421488000',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63405162000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63437205600',
    'utc_start' => '63421477200',
    'local_end' => '63437212800',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63421484400'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63452926800',
    'utc_start' => '63437205600',
    'local_end' => '63452937600',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63437216400'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63468655200',
    'utc_start' => '63452926800',
    'local_end' => '63468662400',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63452934000'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63484376400',
    'utc_start' => '63468655200',
    'local_end' => '63484387200',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63468666000'
  },
  {
    'short_name' => 'EET',
    'utc_end' => '63500104800',
    'utc_start' => '63484376400',
    'local_end' => '63500112000',
    'is_dst' => 0,
    'offset' => 7200,
    'local_start' => '63484383600'
  },
  {
    'short_name' => 'EEST',
    'utc_end' => '63515826000',
    'utc_start' => '63500104800',
    'local_end' => '63515836800',
    'is_dst' => 1,
    'offset' => 10800,
    'local_start' => '63500115600'
  }
]
;

my $max_year = 2013;

sub _new_instance
{
    return shift->_init( @_, spans => $spans );
}

my $rules = [
  bless( {
    'letter' => '',
    'on' => 'lastThu',
    'save' => '0',
    'to' => 'max',
    'from' => '1999',
    'in' => 'Sep',
    'at' => '0:00s',
    'type' => undef,
    'offset' => 0
  }, 'DateTime::TimeZone::OlsonDB::Rule' ),
  bless( {
    'letter' => 'S',
    'on' => 'lastThu',
    'save' => '1:00',
    'to' => 'max',
    'from' => '2000',
    'in' => 'Mar',
    'at' => '0:00s',
    'type' => undef,
    'offset' => 3600
  }, 'DateTime::TimeZone::OlsonDB::Rule' )
]
;
my $last_observance = bless( {
  'until' => undef,
  'format' => 'EE%sT',
  'gmtoff' => '2:00',
  'rules' => 'Jordan',
  'offset' => 7200,
  'start' => bless( {
    'local_rd_secs' => 0,
    'local_rd_days' => 704918,
    'language' => bless( {
      'month_numbers' => {},
      'am_pm' => [
        'AM',
        'PM'
      ],
      'ordinal_suffixes' => [],
      'month_abbreviations' => [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
      ],
      'day_abbreviations' => [
        'Mon',
        'Tue',
        'Wed',
        'Thu',
        'Fri',
        'Sat',
        'Sun'
      ],
      'month_names' => [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
      ],
      'day_numbers' => {},
      'day_names' => [
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
        'Sunday'
      ]
    }, 'DateTime::Language::English' ),
    'tz' => bless( {}, 'DateTime::TimeZone::UTC' ),
    'utc_rd_secs' => 0,
    'utc_rd_days' => 704918,
    'local_c' => {
      'hour' => 0,
      'minute' => 0,
      'second' => 0,
      'month' => 1,
      'day_of_year' => 1,
      'day_of_week' => 4,
      'day' => 1,
      'year' => 1931
    }
  }, 'DateTime' )
}, 'DateTime::TimeZone::OlsonDB::Observance' )
;

sub _generate_spans_until_match
{
    my $self = shift;
    my $dt = shift;

    my $generate_until_year = $dt->utc_year + 1;

    my @changes;
    foreach my $rule (@$rules)
    {
        foreach my $year ( $max_year .. $generate_until_year )
        {
            my $next = $rule->date_for_year( $year, 7200 );

            # don't bother with changes we've seen already
            next if $next->{utc}->utc_rd_as_seconds < $self->{max_span}{utc_end};

            push @changes,
                DateTime::TimeZone::OlsonDB::Change->new
                    ( start_date => $next->{local},
                      short_name =>
                      sprintf( $last_observance->format, $rule->letter ),
                      observance => $last_observance,
                      rule       => $rule,
                    );
        }
    }

    $max_year = $generate_until_year;
    my @sorted = sort { $a->start_date <=> $b->start_date } @changes;

    my $seconds = $dt->utc_rd_as_seconds;
    my $match;

    for ( my $x = 1; $x < @sorted; $x++ )
    {
        my $last_offset =
            $x == 1 ? $self->{max_span}{offset} : $changes[ $x - 2 ]->offset;

        my $span =
            DateTime::TimeZone::OlsonDB::Change::two_changes_as_span
                ( @sorted[ $x - 1, $x ], $last_offset );

        push @{ $self->{spans} }, $span;

        $match = $span
            if $seconds >= $span->{utc_start} && $seconds < $span->{utc_end};
    }

    return $match;
}


1;

