# This file is auto-generated by the Perl DateTime Suite time zone
# code generator (0.01) This code generator comes with the
# DateTime::TimeZone module distribution in the tools/ directory
#
# Generated from Chatham.
#
# Do not edit this file directly.
#
package DateTime::TimeZone::Pacific::Chatham;

use strict;

use Class::Singleton;
use DateTime::TimeZone;
use DateTime::TimeZone::OlsonDB;

@DateTime::TimeZone::Pacific::Chatham::ISA = ( 'Class::Singleton', 'DateTime::TimeZone' );

my $spans =
[
  {
    'short_name' => 'CHAT',
    'utc_end' => '62790904800',
    'utc_start' => $DateTime::TimeZone::NEG_INFINITY,
    'local_end' => '62790950700',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '-inf'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '62804811600',
    'utc_start' => '62790904800',
    'local_end' => '62804861100',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '62790954300'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '62822354400',
    'utc_start' => '62804811600',
    'local_end' => '62822400300',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '62804857500'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '62836261200',
    'utc_start' => '62822354400',
    'local_end' => '62836310700',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '62822403900'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '62853804000',
    'utc_start' => '62836261200',
    'local_end' => '62853849900',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '62836307100'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '62868315600',
    'utc_start' => '62853804000',
    'local_end' => '62868365100',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '62853853500'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '62885253600',
    'utc_start' => '62868315600',
    'local_end' => '62885299500',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '62868361500'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '62899765200',
    'utc_start' => '62885253600',
    'local_end' => '62899814700',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '62885303100'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '62916703200',
    'utc_start' => '62899765200',
    'local_end' => '62916749100',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '62899811100'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '62931214800',
    'utc_start' => '62916703200',
    'local_end' => '62931264300',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '62916752700'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '62948152800',
    'utc_start' => '62931214800',
    'local_end' => '62948198700',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '62931260700'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '62962664400',
    'utc_start' => '62948152800',
    'local_end' => '62962713900',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '62948202300'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '62980207200',
    'utc_start' => '62962664400',
    'local_end' => '62980253100',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '62962710300'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '62994114000',
    'utc_start' => '62980207200',
    'local_end' => '62994163500',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '62980256700'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63011656800',
    'utc_start' => '62994114000',
    'local_end' => '63011702700',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '62994159900'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63025563600',
    'utc_start' => '63011656800',
    'local_end' => '63025613100',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63011706300'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63043106400',
    'utc_start' => '63025563600',
    'local_end' => '63043152300',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63025609500'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63057618000',
    'utc_start' => '63043106400',
    'local_end' => '63057667500',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63043155900'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63074556000',
    'utc_start' => '63057618000',
    'local_end' => '63074601900',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63057663900'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63089067600',
    'utc_start' => '63074556000',
    'local_end' => '63089117100',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63074605500'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63106005600',
    'utc_start' => '63089067600',
    'local_end' => '63106051500',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63089113500'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63120517200',
    'utc_start' => '63106005600',
    'local_end' => '63120566700',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63106055100'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63138060000',
    'utc_start' => '63120517200',
    'local_end' => '63138105900',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63120563100'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63151966800',
    'utc_start' => '63138060000',
    'local_end' => '63152016300',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63138109500'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63169509600',
    'utc_start' => '63151966800',
    'local_end' => '63169555500',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63152012700'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63183416400',
    'utc_start' => '63169509600',
    'local_end' => '63183465900',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63169559100'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63200959200',
    'utc_start' => '63183416400',
    'local_end' => '63201005100',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63183462300'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63215470800',
    'utc_start' => '63200959200',
    'local_end' => '63215520300',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63201008700'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63232408800',
    'utc_start' => '63215470800',
    'local_end' => '63232454700',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63215516700'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63246920400',
    'utc_start' => '63232408800',
    'local_end' => '63246969900',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63232458300'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63263858400',
    'utc_start' => '63246920400',
    'local_end' => '63263904300',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63246966300'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63278370000',
    'utc_start' => '63263858400',
    'local_end' => '63278419500',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63263907900'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63295308000',
    'utc_start' => '63278370000',
    'local_end' => '63295353900',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63278415900'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63309819600',
    'utc_start' => '63295308000',
    'local_end' => '63309869100',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63295357500'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63327362400',
    'utc_start' => '63309819600',
    'local_end' => '63327408300',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63309865500'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63341269200',
    'utc_start' => '63327362400',
    'local_end' => '63341318700',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63327411900'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63358812000',
    'utc_start' => '63341269200',
    'local_end' => '63358857900',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63341315100'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63372718800',
    'utc_start' => '63358812000',
    'local_end' => '63372768300',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63358861500'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63390261600',
    'utc_start' => '63372718800',
    'local_end' => '63390307500',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63372764700'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63404773200',
    'utc_start' => '63390261600',
    'local_end' => '63404822700',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63390311100'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63421711200',
    'utc_start' => '63404773200',
    'local_end' => '63421757100',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63404819100'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63436222800',
    'utc_start' => '63421711200',
    'local_end' => '63436272300',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63421760700'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63453160800',
    'utc_start' => '63436222800',
    'local_end' => '63453206700',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63436268700'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63467672400',
    'utc_start' => '63453160800',
    'local_end' => '63467721900',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63453210300'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63485215200',
    'utc_start' => '63467672400',
    'local_end' => '63485261100',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63467718300'
  },
  {
    'short_name' => 'CHADT',
    'utc_end' => '63499122000',
    'utc_start' => '63485215200',
    'local_end' => '63499171500',
    'is_dst' => 1,
    'offset' => 49500,
    'local_start' => '63485264700'
  },
  {
    'short_name' => 'CHAST',
    'utc_end' => '63516664800',
    'utc_start' => '63499122000',
    'local_end' => '63516710700',
    'is_dst' => 0,
    'offset' => 45900,
    'local_start' => '63499167900'
  }
]
;

my $max_year = 2013;

sub _new_instance
{
    return shift->_init( @_, spans => $spans );
}

my $rules = [
  bless( {
    'letter' => 'S',
    'on' => 'Sun>=15',
    'save' => '0',
    'to' => 'max',
    'from' => '1991',
    'in' => 'Mar',
    'at' => '2:45s',
    'type' => undef,
    'offset' => 0
  }, 'DateTime::TimeZone::OlsonDB::Rule' ),
  bless( {
    'letter' => 'D',
    'on' => 'Sun>=1',
    'save' => '1:00',
    'to' => 'max',
    'from' => '1990',
    'in' => 'Oct',
    'at' => '2:45s',
    'type' => undef,
    'offset' => 3600
  }, 'DateTime::TimeZone::OlsonDB::Rule' )
]
;
my $last_observance = bless( {
  'until' => undef,
  'format' => 'CHA%sT',
  'gmtoff' => '12:45',
  'rules' => 'Chatham',
  'offset' => 45900,
  'start' => undef
}, 'DateTime::TimeZone::OlsonDB::Observance' )
;

sub _generate_spans_until_match
{
    my $self = shift;
    my $dt = shift;

    my $generate_until_year = $dt->utc_year + 1;

    my @changes;
    foreach my $rule (@$rules)
    {
        foreach my $year ( $max_year .. $generate_until_year )
        {
            my $next = $rule->date_for_year( $year, 45900 );

            # don't bother with changes we've seen already
            next if $next->{utc}->utc_rd_as_seconds < $self->{max_span}{utc_end};

            push @changes,
                DateTime::TimeZone::OlsonDB::Change->new
                    ( start_date => $next->{local},
                      short_name =>
                      sprintf( $last_observance->format, $rule->letter ),
                      observance => $last_observance,
                      rule       => $rule,
                    );
        }
    }

    $max_year = $generate_until_year;
    my @sorted = sort { $a->start_date <=> $b->start_date } @changes;

    my $seconds = $dt->utc_rd_as_seconds;
    my $match;

    for ( my $x = 1; $x < @sorted; $x++ )
    {
        my $last_offset =
            $x == 1 ? $self->{max_span}{offset} : $changes[ $x - 2 ]->offset;

        my $span =
            DateTime::TimeZone::OlsonDB::Change::two_changes_as_span
                ( @sorted[ $x - 1, $x ], $last_offset );

        push @{ $self->{spans} }, $span;

        $match = $span
            if $seconds >= $span->{utc_start} && $seconds < $span->{utc_end};
    }

    return $match;
}


1;

