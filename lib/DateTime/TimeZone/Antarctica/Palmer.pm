# This file is auto-generated by the Perl DateTime Suite time zone
# code generator (0.02) This code generator comes with the
# DateTime::TimeZone module distribution in the tools/ directory
#
# Generated from Palmer.
#
# Do not edit this file directly.
#
package DateTime::TimeZone::Antarctica::Palmer;

use strict;

use Class::Singleton;
use DateTime::TimeZone;
use DateTime::TimeZone::OlsonDB;

@DateTime::TimeZone::Antarctica::Palmer::ISA = ( 'Class::Singleton', 'DateTime::TimeZone' );

my $spans =
[
  {
    'short_name' => 'zzz',
    'utc_end' => '61977916800',
    'utc_start' => DateTime::TimeZone::NEG_INFINITY,
    'local_end' => '61977916800',
    'is_dst' => 0,
    'offset' => 0,
    'local_start' => DateTime::TimeZone::NEG_INFINITY
  },
  {
    'short_name' => 'ART',
    'utc_end' => '61983028800',
    'utc_start' => '61977916800',
    'local_end' => '61983014400',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '61977902400'
  },
  {
    'short_name' => 'ART',
    'utc_end' => '62002728000',
    'utc_start' => '61983028800',
    'local_end' => '62002713600',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '61983014400'
  },
  {
    'short_name' => 'ARST',
    'utc_end' => '62014561200',
    'utc_start' => '62002728000',
    'local_end' => '62014550400',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62002717200'
  },
  {
    'short_name' => 'ART',
    'utc_end' => '62034264000',
    'utc_start' => '62014561200',
    'local_end' => '62034249600',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62014546800'
  },
  {
    'short_name' => 'ARST',
    'utc_end' => '62048775600',
    'utc_start' => '62034264000',
    'local_end' => '62048764800',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62034253200'
  },
  {
    'short_name' => 'ART',
    'utc_end' => '62064590400',
    'utc_start' => '62048775600',
    'local_end' => '62064576000',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62048761200'
  },
  {
    'short_name' => 'ARST',
    'utc_end' => '62080916400',
    'utc_start' => '62064590400',
    'local_end' => '62080905600',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62064579600'
  },
  {
    'short_name' => 'ART',
    'utc_end' => '62096644800',
    'utc_start' => '62080916400',
    'local_end' => '62096630400',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62080902000'
  },
  {
    'short_name' => 'ARST',
    'utc_end' => '62112366000',
    'utc_start' => '62096644800',
    'local_end' => '62112355200',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62096634000'
  },
  {
    'short_name' => 'ART',
    'utc_end' => '62128094400',
    'utc_start' => '62112366000',
    'local_end' => '62128080000',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62112351600'
  },
  {
    'short_name' => 'ART',
    'utc_end' => '62263825200',
    'utc_start' => '62128094400',
    'local_end' => '62263814400',
    'is_dst' => 0,
    'offset' => -10800,
    'local_start' => '62128083600'
  },
  {
    'short_name' => 'ARST',
    'utc_end' => '62272288800',
    'utc_start' => '62263825200',
    'local_end' => '62272281600',
    'is_dst' => 1,
    'offset' => -7200,
    'local_start' => '62263818000'
  },
  {
    'short_name' => 'ART',
    'utc_end' => '62285943600',
    'utc_start' => '62272288800',
    'local_end' => '62285932800',
    'is_dst' => 0,
    'offset' => -10800,
    'local_start' => '62272278000'
  },
  {
    'short_name' => 'ARST',
    'utc_end' => '62301664800',
    'utc_start' => '62285943600',
    'local_end' => '62301657600',
    'is_dst' => 1,
    'offset' => -7200,
    'local_start' => '62285936400'
  },
  {
    'short_name' => 'ART',
    'utc_end' => '62317393200',
    'utc_start' => '62301664800',
    'local_end' => '62317382400',
    'is_dst' => 0,
    'offset' => -10800,
    'local_start' => '62301654000'
  },
  {
    'short_name' => 'ARST',
    'utc_end' => '62333114400',
    'utc_start' => '62317393200',
    'local_end' => '62333107200',
    'is_dst' => 1,
    'offset' => -7200,
    'local_start' => '62317386000'
  },
  {
    'short_name' => 'ART',
    'utc_end' => '62348842800',
    'utc_start' => '62333114400',
    'local_end' => '62348832000',
    'is_dst' => 0,
    'offset' => -10800,
    'local_start' => '62333103600'
  },
  {
    'short_name' => 'ARST',
    'utc_end' => '62364564000',
    'utc_start' => '62348842800',
    'local_end' => '62364556800',
    'is_dst' => 1,
    'offset' => -7200,
    'local_start' => '62348835600'
  },
  {
    'short_name' => 'ART',
    'utc_end' => '62524753200',
    'utc_start' => '62364564000',
    'local_end' => '62524742400',
    'is_dst' => 0,
    'offset' => -10800,
    'local_start' => '62364553200'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62538753600',
    'utc_start' => '62524753200',
    'local_end' => '62538739200',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62524738800'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62552055600',
    'utc_start' => '62538753600',
    'local_end' => '62552044800',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62538742800'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62570203200',
    'utc_start' => '62552055600',
    'local_end' => '62570188800',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62552041200'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62583505200',
    'utc_start' => '62570203200',
    'local_end' => '62583494400',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62570192400'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62602257600',
    'utc_start' => '62583505200',
    'local_end' => '62602243200',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62583490800'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62614954800',
    'utc_start' => '62602257600',
    'local_end' => '62614944000',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62602246800'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62633707200',
    'utc_start' => '62614954800',
    'local_end' => '62633692800',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62614940400'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62646404400',
    'utc_start' => '62633707200',
    'local_end' => '62646393600',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62633696400'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62665156800',
    'utc_start' => '62646404400',
    'local_end' => '62665142400',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62646390000'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62678458800',
    'utc_start' => '62665156800',
    'local_end' => '62678448000',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62665146000'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62696606400',
    'utc_start' => '62678458800',
    'local_end' => '62696592000',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62678444400'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62709908400',
    'utc_start' => '62696606400',
    'local_end' => '62709897600',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62696595600'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62728056000',
    'utc_start' => '62709908400',
    'local_end' => '62728041600',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62709894000'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62741358000',
    'utc_start' => '62728056000',
    'local_end' => '62741347200',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62728045200'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62760110400',
    'utc_start' => '62741358000',
    'local_end' => '62760096000',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62741343600'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62772807600',
    'utc_start' => '62760110400',
    'local_end' => '62772796800',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62760099600'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62791560000',
    'utc_start' => '62772807600',
    'local_end' => '62791545600',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62772793200'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62804257200',
    'utc_start' => '62791560000',
    'local_end' => '62804246400',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62791549200'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62823009600',
    'utc_start' => '62804257200',
    'local_end' => '62822995200',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62804242800'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62836311600',
    'utc_start' => '62823009600',
    'local_end' => '62836300800',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62822998800'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62854459200',
    'utc_start' => '62836311600',
    'local_end' => '62854444800',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62836297200'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62867761200',
    'utc_start' => '62854459200',
    'local_end' => '62867750400',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62854448400'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62885908800',
    'utc_start' => '62867761200',
    'local_end' => '62885894400',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62867746800'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62899210800',
    'utc_start' => '62885908800',
    'local_end' => '62899200000',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62885898000'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62917358400',
    'utc_start' => '62899210800',
    'local_end' => '62917344000',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62899196400'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62930660400',
    'utc_start' => '62917358400',
    'local_end' => '62930649600',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62917347600'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62949412800',
    'utc_start' => '62930660400',
    'local_end' => '62949398400',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62930646000'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62962110000',
    'utc_start' => '62949412800',
    'local_end' => '62962099200',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62949402000'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '62980862400',
    'utc_start' => '62962110000',
    'local_end' => '62980848000',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62962095600'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '62993559600',
    'utc_start' => '62980862400',
    'local_end' => '62993548800',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '62980851600'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63075211200',
    'utc_start' => '62993559600',
    'local_end' => '63075196800',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '62993545200'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63088513200',
    'utc_start' => '63075211200',
    'local_end' => '63088502400',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63075200400'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63107265600',
    'utc_start' => '63088513200',
    'local_end' => '63107251200',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63088498800'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63119962800',
    'utc_start' => '63107265600',
    'local_end' => '63119952000',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63107254800'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63138715200',
    'utc_start' => '63119962800',
    'local_end' => '63138700800',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63119948400'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63151412400',
    'utc_start' => '63138715200',
    'local_end' => '63151401600',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63138704400'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63170164800',
    'utc_start' => '63151412400',
    'local_end' => '63170150400',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63151398000'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63182862000',
    'utc_start' => '63170164800',
    'local_end' => '63182851200',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63170154000'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63201614400',
    'utc_start' => '63182862000',
    'local_end' => '63201600000',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63182847600'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63214916400',
    'utc_start' => '63201614400',
    'local_end' => '63214905600',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63201603600'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63233064000',
    'utc_start' => '63214916400',
    'local_end' => '63233049600',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63214902000'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63246366000',
    'utc_start' => '63233064000',
    'local_end' => '63246355200',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63233053200'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63264513600',
    'utc_start' => '63246366000',
    'local_end' => '63264499200',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63246351600'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63277815600',
    'utc_start' => '63264513600',
    'local_end' => '63277804800',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63264502800'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63296568000',
    'utc_start' => '63277815600',
    'local_end' => '63296553600',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63277801200'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63309265200',
    'utc_start' => '63296568000',
    'local_end' => '63309254400',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63296557200'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63328017600',
    'utc_start' => '63309265200',
    'local_end' => '63328003200',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63309250800'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63340714800',
    'utc_start' => '63328017600',
    'local_end' => '63340704000',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63328006800'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63359467200',
    'utc_start' => '63340714800',
    'local_end' => '63359452800',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63340700400'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63372769200',
    'utc_start' => '63359467200',
    'local_end' => '63372758400',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63359456400'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63390916800',
    'utc_start' => '63372769200',
    'local_end' => '63390902400',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63372754800'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63404218800',
    'utc_start' => '63390916800',
    'local_end' => '63404208000',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63390906000'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63422366400',
    'utc_start' => '63404218800',
    'local_end' => '63422352000',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63404204400'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63435668400',
    'utc_start' => '63422366400',
    'local_end' => '63435657600',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63422355600'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63453816000',
    'utc_start' => '63435668400',
    'local_end' => '63453801600',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63435654000'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63467118000',
    'utc_start' => '63453816000',
    'local_end' => '63467107200',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63453805200'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63485870400',
    'utc_start' => '63467118000',
    'local_end' => '63485856000',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63467103600'
  },
  {
    'short_name' => 'CLST',
    'utc_end' => '63498567600',
    'utc_start' => '63485870400',
    'local_end' => '63498556800',
    'is_dst' => 1,
    'offset' => -10800,
    'local_start' => '63485859600'
  },
  {
    'short_name' => 'CLT',
    'utc_end' => '63517320000',
    'utc_start' => '63498567600',
    'local_end' => '63517305600',
    'is_dst' => 0,
    'offset' => -14400,
    'local_start' => '63498553200'
  }
]
;

my $max_year = 2013;

sub _new_instance
{
    return shift->_init( @_, spans => $spans );
}

my $rules = [
  bless( {
    'letter' => '',
    'on' => 'Sun>=9',
    'save' => '0',
    'to' => 'max',
    'from' => '2000',
    'in' => 'Mar',
    'at' => '0:00',
    'type' => undef,
    'offset' => 0
  }, 'DateTime::TimeZone::OlsonDB::Rule' ),
  bless( {
    'letter' => 'S',
    'on' => 'Sun>=9',
    'save' => '1:00',
    'to' => 'max',
    'from' => '1999',
    'in' => 'Oct',
    'at' => '0:00',
    'type' => undef,
    'offset' => 3600
  }, 'DateTime::TimeZone::OlsonDB::Rule' )
]
;
my $last_observance = bless( {
  'until' => undef,
  'format' => 'CL%sT',
  'gmtoff' => '-4:00',
  'rules' => 'ChileAQ',
  'offset' => -14400,
  'start' => bless( {
    'local_rd_secs' => 0,
    'local_rd_days' => 723666,
    'language' => bless( {
      'month_numbers' => {},
      'am_pm' => [
        'AM',
        'PM'
      ],
      'ordinal_suffixes' => [],
      'month_abbreviations' => [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
      ],
      'day_abbreviations' => [
        'Mon',
        'Tue',
        'Wed',
        'Thu',
        'Fri',
        'Sat',
        'Sun'
      ],
      'month_names' => [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
      ],
      'day_numbers' => {},
      'day_names' => [
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
        'Sunday'
      ]
    }, 'DateTime::Language::English' ),
    'tz' => bless( {}, 'DateTime::TimeZone::UTC' ),
    'utc_rd_secs' => 0,
    'utc_rd_days' => 723666,
    'local_c' => {
      'hour' => 0,
      'minute' => 0,
      'second' => 0,
      'month' => 5,
      'day_of_year' => 121,
      'day_of_week' => 6,
      'day' => 1,
      'year' => 1982
    }
  }, 'DateTime' )
}, 'DateTime::TimeZone::OlsonDB::Observance' )
;

sub _generate_spans_until_match
{
    my $self = shift;
    my $dt = shift;

    my $generate_until_year = $dt->utc_year + 1;

    my @changes;
    foreach my $rule (@$rules)
    {
        foreach my $year ( $max_year .. $generate_until_year )
        {
            my $next = $rule->date_for_year( $year, -14400 );

            # don't bother with changes we've seen already
            next if $next->{utc}->utc_rd_as_seconds < $self->{max_span}{utc_end};

            push @changes,
                DateTime::TimeZone::OlsonDB::Change->new
                    ( start_date => $next->{local},
                      short_name =>
                      sprintf( $last_observance->format, $rule->letter ),
                      observance => $last_observance,
                      rule       => $rule,
                    );
        }
    }

    $max_year = $generate_until_year;
    my @sorted = sort { $a->start_date <=> $b->start_date } @changes;

    my $seconds = $dt->utc_rd_as_seconds;
    my $match;

    for ( my $x = 1; $x < @sorted; $x++ )
    {
        my $last_offset =
            $x == 1 ? $self->{max_span}{offset} : $changes[ $x - 2 ]->offset;

        my $span =
            DateTime::TimeZone::OlsonDB::Change::two_changes_as_span
                ( @sorted[ $x - 1, $x ], $last_offset );

        push @{ $self->{spans} }, $span;

        $match = $span
            if $seconds >= $span->{utc_start} && $seconds < $span->{utc_end};
    }

    return $match;
}


1;

